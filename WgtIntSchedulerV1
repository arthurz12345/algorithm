import java.util.Arrays;
import java.util.Comparator;

// define Job class
class Job
{
	int id, start, finish, weight;

	Job(int id, int s, int f, int w)
	{
	    this.id = id;
		this.start = s;
		this.finish = f;
		this.weight = w;
	}
}

// This version computer the optimal weight
public class WgtIntSchedulerV1 
{
	// Find the index of the last job which doesn't conflict with job n.
	public static int findLastNonConflictingJob(Job jobs[], int n)
	{
		// find the last job index whose finish time <= job n's start time
		for (int i = n - 1; i >= 0; i--)
		{
			if (jobs[i].finish <= jobs[n].start) {
				//System.out.println("findLastNonConflictingJob:" + i);
				//System.out.println("in set: job" + jobs[i].id);
				return i;
			}
		}

		// no non-conflicting job is found
		return -1;
	}

	// Recursive function to find the max Weight subset of non-conflictingjobs
	public static int findMaxWeight(Job jobs[], int n)
	{
		// base case
		if (n < 0) {
			return 0;
		}

		// return if only one item is remaining
		if (n == 0) {
			return jobs[0].weight;
		}

		// find the index of the last non-conflicting job 
		int index = findLastNonConflictingJob(jobs, n);
		
		

		// include the current job and recur for non-conflicting jobs `[0, index]`
		int include = jobs[n].weight + findMaxWeight(jobs, index);

		// exclude the current job and recur for remaining items `[0, n-1]`
		int exclude = findMaxWeight(jobs, n - 1);

		// return the maximum Weight by including or excluding the current job
		return Math.max(include, exclude);
	}
    
    static Job[] sortJobs(int[] s, int[] f, int[] w)
    {
        int n = w.length; // total number of jobs
        
        // Create object structure so that we can keep track of job id
        Job jobs[] = new Job[n];
        for (int i = 0; i < n; i++)
        {
            jobs[i] = new Job(i + 1, s[i], f[i], w[i]);
        }
        
        System.out.println("jobs:");
        for(Job j: jobs){
            System.out.println("job" + j.id + ":" + j.start + "-" + j.finish + "-" + j.weight);
        }
        
        // Sort jobs by finish time ascending
        Arrays.sort(jobs, new Comparator<Job>() {
            public int compare(Job job1, Job job2)
            {
                return job1.finish - job2.finish;
            }
        });
        
        System.out.println("jobs:");
        for(Job j: jobs){
            System.out.println("job" + j.id + ":" + j.start + "-" + j.finish + "-" + j.weight);
        }
        
        return jobs;
    }
    
    static int[] getOptSet (int[] stime, int[] ftime, int[] weight)
    {
        return null;
    }

    static int getOptWeight(int[] stime, int[] ftime, int[] weight)
    {
        Job jobs[] = sortJobs(stime, ftime, weight);
        return findMaxWeight(jobs, jobs.length - 1);
    }

	public static void main(String[] args)
	{
	    //int s[] = {3,3,1,10,8}; // start times for jobs 1, 2, 3, 4, 5
        //int f[] = {7,10,4,13,11}; // finish times for jobs 1, 2, 3, 4, 5
        //int w[] = {6,9,5,8,10}; // weights for jobs 1, 2, 3, 4, 5
        
		int s[] = {4, 3, 2, 10, 7}; // start times for jobs 1, 2, 3, 4, 5
        int f[] = {7, 10, 6, 13, 9}; // finish times for jobs 1, 2, 3, 4, 5
        int w[] = {6, 6, 5, 2, 8}; // weights for jobs 1, 2, 3, 4, 5
        
        //int s[] = {3,1,6,2}; 
        //int f[] = {10,2,19,100}; 
        //int w[] = {20,50,100,200}; 
        
        System.out.println("The optimal weight is "+ getOptWeight(s, f, w));

	}
}
