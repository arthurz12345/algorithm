import java.util.*;

// define Job class. A job has id, start, finish and weight.
class Job
{
	int id, start, finish, weight;

	Job(int id, int s, int f, int w)
	{
	    this.id = id;
		this.start = s;
		this.finish = f;
		this.weight = w;
	}
}

// defind a class to hold a list of non-conflicting jobs and their combined weight
class WeightedJobs
{
	ArrayList<Job> job = new ArrayList<Job>();
	int combinedWeight;
}

//for optimal set
public class WgtIntScheduler 
{

	// Find the index of the last job which doesn't conflict with current job.
    static int lastNonConflictIndex(Job jobs[], int index) 
    { 
        // low starts from first job
        int low = 0;
        // high starts from last job
        int high = index - 1; 
      
        // binary Search  
        while (low <= high) 
        { 
            int mid = (low + high) / 2; 
            if (jobs[mid].finish <= jobs[index].start) 
            { 
                if (jobs[mid + 1].finish <= jobs[index].start) 
                    low = mid + 1; 
                else{
                    return mid; 
                }
            } 
            else
                high = mid - 1; 
        } 
      
        return -1; 
    } 

	// function to find the max Weight subset of non-conflicting jobs
	public static WeightedJobs[] findMaxWeightSet(Job jobs[], int n)
	{
	    WeightedJobs[] arrWj = new WeightedJobs[n];
	    WeightedJobs wj = new WeightedJobs();
        wj.combinedWeight = jobs[0].weight; 
        wj.job.add(jobs[0]); 
        arrWj[0] = wj;
      
        // Fill entries in DP[] using recursive property 
        for (int i = 1; i < n; i++) 
        { 
            wj = new WeightedJobs();
            arrWj[i] = wj;
            
            // Find weight including the current job 
            int includingWeight = jobs[i].weight; 
            int lastIndex = lastNonConflictIndex(jobs, i); 
            if (lastIndex != - 1) 
                includingWeight += arrWj[lastIndex].combinedWeight; 
            
            // Compare weight including and excluding current job
            if (includingWeight > arrWj[i - 1].combinedWeight) 
            { 
                arrWj[i].combinedWeight = includingWeight; 
      
                // add current job to optimal set
                if (lastIndex != - 1) {
                arrWj[i].job = arrWj[lastIndex].job; }
                arrWj[i].job.add(jobs[i]); 
                
            } 
            else
                // exclude current job 
                arrWj[i] = arrWj[i - 1]; 
            
        } 
	    
	    return arrWj;
	}
    
    // Sort jobs by finish time ascending
    static Job[] sortJobs(int[] s, int[] f, int[] w)
    {
        int n = w.length; // total number of jobs
        
        // Create object structure so that we can keep track of original job id numbers
        Job jobs[] = new Job[n];
        for (int i = 0; i < n; i++)
        {
            jobs[i] = new Job(i + 1, s[i], f[i], w[i]);
        }
        
        System.out.println("original jobs:");
        for(Job j: jobs){
            System.out.println("job" + j.id + ":" + j.start + "-" + j.finish + "-" + j.weight);
        }
        
        // define Comparator Interface for sorting
        Arrays.sort(jobs, new Comparator<Job>() {
            public int compare(Job job1, Job job2)
            {
                return job1.finish - job2.finish;
            }
        });
        
        System.out.println("sorted jobs:");
        for(Job j: jobs){
            System.out.println("job" + j.id + ":" + j.start + "-" + j.finish + "-" + j.weight);
        }
        
        return jobs;
    }
    
    // function to return the job id numbers of optimal subset 
    static int[] getOptSet (int[] stime, int[] ftime, int[] weight)
    {
        Job jobs[] = sortJobs(stime, ftime, weight);
        int m = jobs.length;
        
        WeightedJobs[] arrWj = findMaxWeightSet(jobs, m);
        
        System.out.println("opt weight:" + arrWj[m-1].combinedWeight);
        
        System.out.println("opt jobs:");
		for (int i=0; i<arrWj[m-1].job.size(); i++) 
        { 
            Job j = arrWj[m-1].job.get(i); 
            System.out.println("job" + j.id + ":" + j.start + "-" + j.finish + "-" + j.weight);
        } 
        
        // extract job id numbers
        ArrayList<Integer> jobIds = new ArrayList<Integer>();
        for (int i=0; i<arrWj[m-1].job.size(); i++) 
        {
            Job job = arrWj[m-1].job.get(i); 
            jobIds.add(job.id);
        }
        
        System.out.println("unsorted job ids:");
        for (int i=0; i<jobIds.size(); i++) {
          System.out.println(jobIds.get(i));
        }
        
        // sort job id numbers ascending
        Collections.sort(jobIds);
        
        // convert to int[] array and return
        int[] result = new int[jobIds.size()];
        int count = 0;
        for (Integer n : jobIds)
        {
            result[count++] = n.intValue();
        }

        return result;
    }

	public static void main(String[] args)
	{
	    //int s[] = {3,3,1,10,8}; // start times for jobs 1, 2, 3, 4, 5
        //int f[] = {7,10,4,13,11}; // finish times for jobs 1, 2, 3, 4, 5
        //int w[] = {6,9,5,8,10}; // weights for jobs 1, 2, 3, 4, 5
        
		int s[] = {4, 3, 2, 10, 7}; // start times for jobs 1, 2, 3, 4, 5
        int f[] = {7, 10, 6, 13, 9}; // finish times for jobs 1, 2, 3, 4, 5
        int w[] = {6, 6, 5, 2, 8}; // weights for jobs 1, 2, 3, 4, 5
        
        //int s[] = {3,1,6,2}; 
        //int f[] = {10,2,19,100}; 
        //int w[] = {20,50,100,200}; 
        
        int[] jobIds = getOptSet(s, f, w);
        System.out.println("sorted job ids:");
        for (int i=0; i<jobIds.length; i++) {
          System.out.println(jobIds[i]);
        }

	}
}
