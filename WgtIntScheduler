// computer the optimal weight with recursion
import java.util.*;

// define a class to hold opt set and their combined weight
class WeightandJobs
{
	int combinedweight = 0;
	ArrayList<Integer> jobIds = new ArrayList<Integer>();
}

// define Job class
class Job
{
	int id, start, finish, weight;

	Job(int id, int s, int f, int w)
	{
	    this.id = id;
		this.start = s;
		this.finish = f;
		this.weight = w;
	}
}

public class WgtIntScheduler
{
	// Find the index of the last job which doesn't conflict with job n.
	public static int findLastNonConflictingJob(Job jobs[], int n)
	{
		// find the last job with finish time <= job n's start time
		for (int i = n - 1; i >= 0; i--)
		{
			if (jobs[i].finish <= jobs[n].start) {
				return i;
			}
		}

		// no non-conflicting job is found
		return -1;
	}

	// Recursive function to find the opt subset of non-conflicting jobs
	public static WeightandJobs findMaxWeight(Job jobs[], int n)
	{
	    WeightandJobs wj = new WeightandJobs();
	    
		// base case
		if (n < 0) {
			return wj;
		}

		// return if only one item is remaining
		if (n == 0) {
		    wj.combinedweight = jobs[0].weight;
		    wj.jobIds.add(jobs[0].id);
			return wj;
		}

		// find the index of the last non-conflicting job 
		int index = findLastNonConflictingJob(jobs, n);
		
		WeightandJobs wjInclude = findMaxWeight(jobs, index);
		WeightandJobs wjExclude = findMaxWeight(jobs, n-1);
		
		if (jobs[n].weight + wjInclude.combinedweight > wjExclude.combinedweight) 
		{
		    // include the current job and recur for non-conflicting jobs [0, index]
            wj.combinedweight = jobs[n].weight + wjInclude.combinedweight;
		    // add current job to optimal set
		    wj.jobIds = wjInclude.jobIds;
		    wj.jobIds.add(jobs[n].id);
		}
		else
		{
		    //exclude the current job and recur for remaining items [0, n-1]
		    wj.jobIds = wjExclude.jobIds;
		    wj.combinedweight = wjExclude.combinedweight;
		}

		// return the maximum Weight and job id list
		return wj;
	}
    
    static Job[] sortJobs(int[] s, int[] f, int[] w)
    {
        int n = w.length; // total number of jobs
        
        // Create object structure so that we can keep track of job id
        Job jobs[] = new Job[n];
        for (int i = 0; i < n; i++)
        {
            jobs[i] = new Job(i + 1, s[i], f[i], w[i]);
        }
        
        System.out.println("jobs:");
        for(Job j: jobs){
            System.out.println("job" + j.id + ":" + j.start + "-" + j.finish + "-" + j.weight);
        }
        
        // Sort jobs by finish time ascending
        Arrays.sort(jobs, new Comparator<Job>() {
            public int compare(Job job1, Job job2)
            {
                return job1.finish - job2.finish;
            }
        });
        
        System.out.println("sorted jobs:");
        for(Job j: jobs){
            System.out.println("job" + j.id + ":" + j.start + "-" + j.finish + "-" + j.weight);
        }
        
        return jobs;
    }
    
    public static int[] getOptSet (int[] stime, int[] ftime, int[] weight)
    {
        Job jobs[] = sortJobs(stime, ftime, weight);
        WeightandJobs wj = findMaxWeight(jobs, jobs.length - 1);
        
        // sort job id numbers ascending
        ArrayList<Integer> jobIds = wj.jobIds;
        Collections.sort(jobIds);
        
        // convert to int[] array and return result
        int[] result = new int[jobIds.size()];
        int count = 0;
        for (Integer n : jobIds)
        {
            result[count++] = n.intValue();
        }

        return result;
    }

	public static void main(String[] args)
	{
	    //int s[] = {3,3,1,10,8}; // start times for jobs 1, 2, 3, 4, 5
        //int f[] = {7,10,4,13,11}; // finish times for jobs 1, 2, 3, 4, 5
        //int w[] = {6,9,5,8,10}; // weights for jobs 1, 2, 3, 4, 5
        
	    int s[] = {4, 3, 2, 10, 7}; // start times for jobs 1, 2, 3, 4, 5
        int f[] = {7, 10, 6, 13, 9}; // finish times for jobs 1, 2, 3, 4, 5
        int w[] = {6, 6, 5, 2, 8}; // weights for jobs 1, 2, 3, 4, 5
        
        //int s[] = {3,1,6,2}; 
        //int f[] = {10,2,19,100}; 
        //int w[] = {20,50,100,200}; 
        
        //System.out.println("The optimal weight is "+ getOptWeight(s, f, w));
        int[] jobIds = getOptSet(s, f, w);
        System.out.println("sorted job ids:");
        for (int i=0; i<jobIds.length; i++) {
          System.out.println(jobIds[i]);
        }

	}
}
